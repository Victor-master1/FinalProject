{"ast":null,"code":"var _SettingsManager;\nexport class SettingsManager {\n  constructor() {\n    this.settings = {};\n    this.listeners = [];\n    this.loadSettings();\n    this.setupAutoSave();\n  }\n  static getInstance() {\n    if (!SettingsManager.instance) {\n      SettingsManager.instance = new SettingsManager();\n    }\n    return SettingsManager.instance;\n  }\n  loadSettings() {\n    try {\n      const stored = localStorage.getItem('signflow-settings');\n      if (stored) {\n        this.settings = JSON.parse(stored);\n        this.applyStoredSettings();\n      }\n    } catch (error) {\n      console.error('Error loading settings:', error);\n    }\n  }\n  setupAutoSave() {\n    setInterval(() => {\n      this.save();\n    }, 30000);\n  }\n  applyStoredSettings() {\n    if (this.settings.appearance) {\n      this.applyAppearanceSettings();\n    }\n  }\n  applyAppearanceSettings() {\n    const root = document.documentElement;\n    const body = document.body;\n    if (this.settings.appearance.fontSize) {\n      root.style.fontSize = this.getFontSizeValue(this.settings.appearance.fontSize);\n    }\n    if (this.settings.appearance.borderRadius) {\n      root.style.setProperty('--border-radius-base', this.getBorderRadiusValue(this.settings.appearance.borderRadius));\n    }\n    body.classList.remove('high-contrast', 'compact-mode', 'no-animations');\n    if (this.settings.appearance.highContrast) {\n      body.classList.add('high-contrast');\n    }\n    if (this.settings.appearance.compactMode) {\n      body.classList.add('compact-mode');\n    }\n    if (!this.settings.appearance.animations) {\n      body.classList.add('no-animations');\n    }\n  }\n  getFontSizeValue(size) {\n    const sizes = {\n      'small': '14px',\n      'medium': '16px',\n      'large': '18px',\n      'extra-large': '20px'\n    };\n    return sizes[size] || sizes.medium;\n  }\n  getBorderRadiusValue(radius) {\n    const radiuses = {\n      'none': '0px',\n      'small': '4px',\n      'normal': '8px',\n      'large': '16px'\n    };\n    return radiuses[radius] || radiuses.normal;\n  }\n  get(key, defaultValue) {\n    const keys = key.split('.');\n    let value = this.settings;\n    for (const k of keys) {\n      var _value;\n      value = (_value = value) === null || _value === void 0 ? void 0 : _value[k];\n      if (value === undefined) {\n        return defaultValue;\n      }\n    }\n    return value;\n  }\n  set(key, value) {\n    const keys = key.split('.');\n    let current = this.settings;\n    for (let i = 0; i < keys.length - 1; i++) {\n      if (!current[keys[i]]) {\n        current[keys[i]] = {};\n      }\n      current = current[keys[i]];\n    }\n    current[keys[keys.length - 1]] = value;\n    this.save();\n    this.notifyListeners();\n    this.applyStoredSettings();\n  }\n  save() {\n    try {\n      localStorage.setItem('signflow-settings', JSON.stringify(this.settings));\n    } catch (error) {\n      console.error('Error saving settings:', error);\n    }\n  }\n  subscribe(listener) {\n    this.listeners.push(listener);\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n  notifyListeners() {\n    this.listeners.forEach(listener => listener(this.settings));\n  }\n  reset() {\n    this.settings = {};\n    localStorage.removeItem('signflow-settings');\n    document.body.className = '';\n    document.documentElement.style.fontSize = '';\n    document.documentElement.style.setProperty('--border-radius-base', '');\n    this.notifyListeners();\n  }\n  export() {\n    return JSON.stringify(this.settings, null, 2);\n  }\n  import(settingsJson) {\n    try {\n      const imported = JSON.parse(settingsJson);\n      this.settings = imported;\n      this.save();\n      this.applyStoredSettings();\n      this.notifyListeners();\n      return true;\n    } catch (error) {\n      console.error('Error importing settings:', error);\n      return false;\n    }\n  }\n  applySettings(settings) {\n    this.settings = {\n      ...this.settings,\n      ...settings\n    };\n    this.applyStoredSettings();\n    this.save();\n    this.notifyListeners();\n  }\n  getAudioSettings() {\n    return this.get('audio', {\n      enabled: true,\n      volume: 0.8,\n      voice: '',\n      rate: 1,\n      pitch: 1,\n      autoSpeak: false,\n      soundEffects: true\n    });\n  }\n  getCameraSettings() {\n    return this.get('camera', {\n      resolution: '640x480',\n      frameRate: 30,\n      mirror: true,\n      brightness: 0,\n      contrast: 0,\n      autoFocus: true\n    });\n  }\n  getDetectionSettings() {\n    return this.get('detection', {\n      confidenceThreshold: 0.7,\n      predictionDelay: 500,\n      maxPredictions: 10,\n      autoCapture: true,\n      stabilization: true\n    });\n  }\n  getPrivacySettings() {\n    return this.get('privacy', {\n      saveDetections: true,\n      shareAnalytics: false,\n      localStorage: true,\n      dataRetention: 30\n    });\n  }\n  getAdvancedSettings() {\n    return this.get('advanced', {\n      debugMode: false,\n      performanceMode: false,\n      modelCaching: true,\n      gpuAcceleration: true,\n      experimentalFeatures: false\n    });\n  }\n}\n_SettingsManager = SettingsManager;\nSettingsManager.instance = void 0;\nexport const settingsManager = SettingsManager.getInstance();","map":{"version":3,"names":["SettingsManager","constructor","settings","listeners","loadSettings","setupAutoSave","getInstance","instance","stored","localStorage","getItem","JSON","parse","applyStoredSettings","error","console","setInterval","save","appearance","applyAppearanceSettings","root","document","documentElement","body","fontSize","style","getFontSizeValue","borderRadius","setProperty","getBorderRadiusValue","classList","remove","highContrast","add","compactMode","animations","size","sizes","medium","radius","radiuses","normal","get","key","defaultValue","keys","split","value","k","_value","undefined","set","current","i","length","notifyListeners","setItem","stringify","subscribe","listener","push","index","indexOf","splice","forEach","reset","removeItem","className","export","import","settingsJson","imported","applySettings","getAudioSettings","enabled","volume","voice","rate","pitch","autoSpeak","soundEffects","getCameraSettings","resolution","frameRate","mirror","brightness","contrast","autoFocus","getDetectionSettings","confidenceThreshold","predictionDelay","maxPredictions","autoCapture","stabilization","getPrivacySettings","saveDetections","shareAnalytics","dataRetention","getAdvancedSettings","debugMode","performanceMode","modelCaching","gpuAcceleration","experimentalFeatures","_SettingsManager","settingsManager"],"sources":["C:/Users/quisp/Desktop/FinalProject/frontend/src/utils/settingsManager.ts"],"sourcesContent":["export class SettingsManager {\r\n  private static instance: SettingsManager;\r\n  private settings: any = {};\r\n  private listeners: Array<(settings: any) => void> = [];\r\n\r\n  private constructor() {\r\n    this.loadSettings();\r\n    this.setupAutoSave();\r\n  }\r\n\r\n  static getInstance(): SettingsManager {\r\n    if (!SettingsManager.instance) {\r\n      SettingsManager.instance = new SettingsManager();\r\n    }\r\n    return SettingsManager.instance;\r\n  }\r\n\r\n  private loadSettings() {\r\n    try {\r\n      const stored = localStorage.getItem('signflow-settings');\r\n      if (stored) {\r\n        this.settings = JSON.parse(stored);\r\n        this.applyStoredSettings();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading settings:', error);\r\n    }\r\n  }\r\n\r\n  private setupAutoSave() {\r\n    setInterval(() => {\r\n      this.save();\r\n    }, 30000);\r\n  }\r\n\r\n  private applyStoredSettings() {\r\n    if (this.settings.appearance) {\r\n      this.applyAppearanceSettings();\r\n    }\r\n  }\r\n\r\n  private applyAppearanceSettings() {\r\n    const root = document.documentElement;\r\n    const body = document.body;\r\n\r\n    if (this.settings.appearance.fontSize) {\r\n      root.style.fontSize = this.getFontSizeValue(this.settings.appearance.fontSize);\r\n    }\r\n\r\n    if (this.settings.appearance.borderRadius) {\r\n      root.style.setProperty('--border-radius-base', this.getBorderRadiusValue(this.settings.appearance.borderRadius));\r\n    }\r\n\r\n    body.classList.remove('high-contrast', 'compact-mode', 'no-animations');\r\n\r\n    if (this.settings.appearance.highContrast) {\r\n      body.classList.add('high-contrast');\r\n    }\r\n\r\n    if (this.settings.appearance.compactMode) {\r\n      body.classList.add('compact-mode');\r\n    }\r\n\r\n    if (!this.settings.appearance.animations) {\r\n      body.classList.add('no-animations');\r\n    }\r\n  }\r\n\r\n  private getFontSizeValue(size: string) {\r\n    const sizes = {\r\n      'small': '14px',\r\n      'medium': '16px', \r\n      'large': '18px',\r\n      'extra-large': '20px'\r\n    };\r\n    return sizes[size as keyof typeof sizes] || sizes.medium;\r\n  }\r\n\r\n  private getBorderRadiusValue(radius: string) {\r\n    const radiuses = {\r\n      'none': '0px',\r\n      'small': '4px',\r\n      'normal': '8px', \r\n      'large': '16px'\r\n    };\r\n    return radiuses[radius as keyof typeof radiuses] || radiuses.normal;\r\n  }\r\n\r\n  get(key: string, defaultValue?: any) {\r\n    const keys = key.split('.');\r\n    let value = this.settings;\r\n\r\n    for (const k of keys) {\r\n      value = value?.[k];\r\n      if (value === undefined) {\r\n        return defaultValue;\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  set(key: string, value: any) {\r\n    const keys = key.split('.');\r\n    let current = this.settings;\r\n\r\n    for (let i = 0; i < keys.length - 1; i++) {\r\n      if (!current[keys[i]]) {\r\n        current[keys[i]] = {};\r\n      }\r\n      current = current[keys[i]];\r\n    }\r\n\r\n    current[keys[keys.length - 1]] = value;\r\n    this.save();\r\n    this.notifyListeners();\r\n    this.applyStoredSettings();\r\n  }\r\n\r\n  private save() {\r\n    try {\r\n      localStorage.setItem('signflow-settings', JSON.stringify(this.settings));\r\n    } catch (error) {\r\n      console.error('Error saving settings:', error);\r\n    }\r\n  }\r\n\r\n  subscribe(listener: (settings: any) => void) {\r\n    this.listeners.push(listener);\r\n    return () => {\r\n      const index = this.listeners.indexOf(listener);\r\n      if (index > -1) {\r\n        this.listeners.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  private notifyListeners() {\r\n    this.listeners.forEach(listener => listener(this.settings));\r\n  }\r\n\r\n  reset() {\r\n    this.settings = {};\r\n    localStorage.removeItem('signflow-settings');\r\n    document.body.className = '';\r\n    document.documentElement.style.fontSize = '';\r\n    document.documentElement.style.setProperty('--border-radius-base', '');\r\n    this.notifyListeners();\r\n  }\r\n\r\n  export() {\r\n    return JSON.stringify(this.settings, null, 2);\r\n  }\r\n\r\n  import(settingsJson: string) {\r\n    try {\r\n      const imported = JSON.parse(settingsJson);\r\n      this.settings = imported;\r\n      this.save();\r\n      this.applyStoredSettings();\r\n      this.notifyListeners();\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error importing settings:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  applySettings(settings: any) {\r\n    this.settings = { ...this.settings, ...settings };\r\n    this.applyStoredSettings();\r\n    this.save();\r\n    this.notifyListeners();\r\n  }\r\n\r\n  getAudioSettings() {\r\n    return this.get('audio', {\r\n      enabled: true,\r\n      volume: 0.8,\r\n      voice: '',\r\n      rate: 1,\r\n      pitch: 1,\r\n      autoSpeak: false,\r\n      soundEffects: true\r\n    });\r\n  }\r\n\r\n  getCameraSettings() {\r\n    return this.get('camera', {\r\n      resolution: '640x480',\r\n      frameRate: 30,\r\n      mirror: true,\r\n      brightness: 0,\r\n      contrast: 0,\r\n      autoFocus: true\r\n    });\r\n  }\r\n\r\n  getDetectionSettings() {\r\n    return this.get('detection', {\r\n      confidenceThreshold: 0.7,\r\n      predictionDelay: 500,\r\n      maxPredictions: 10,\r\n      autoCapture: true,\r\n      stabilization: true\r\n    });\r\n  }\r\n\r\n  getPrivacySettings() {\r\n    return this.get('privacy', {\r\n      saveDetections: true,\r\n      shareAnalytics: false,\r\n      localStorage: true,\r\n      dataRetention: 30\r\n    });\r\n  }\r\n\r\n  getAdvancedSettings() {\r\n    return this.get('advanced', {\r\n      debugMode: false,\r\n      performanceMode: false,\r\n      modelCaching: true,\r\n      gpuAcceleration: true,\r\n      experimentalFeatures: false\r\n    });\r\n  }\r\n}\r\n\r\nexport const settingsManager = SettingsManager.getInstance();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}